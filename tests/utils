#!/bin/bash

TEST_DIR="tests"
SAMPLES_DIR="$TEST_DIR/samples"
EXTERNAL_DIR="$TEST_DIR/external"
TMP_TEST_DIR="$TEST_DIR/.tmp"
FAKE_DRM_SYSFS="$TMP_TEST_DIR/sys/class/drm"

# Samples
MAINTAINERS_SAMPLE="$SAMPLES_DIR/MAINTAINERS"
KW_CONFIG_SAMPLE="$SAMPLES_DIR/kworkflow.config"

# External files
CHECKPATH_EXT="$EXTERNAL_DIR/get_maintainer.pl"

function init_env
{
  unset -v src_script_path external_script_path KWORKFLOW
  external_script_path="tests/external"
  src_script_path="./src"
  export src_script_path external_script_path KWORKFLOW
}

# Receives a string with one or more lines and print each of
# then prefixed by "> "
function prefix_multiline
{
  echo "$@" | sed -E "s/^/> /g"
}

# Receives a path and creates a fake kernel root in it. The goal is to make this
# path recognizable by src/kwlib.sh:is_kernel_root().
function mk_fake_kernel_root
{
  local -r path="$1"
  mkdir -p "$path"
  touch "$path/COPYING"
  touch "$path/CREDITS"
  touch "$path/Kbuild"
  touch "$path/Makefile"
  touch "$path/README"
  touch "$path/MAINTAINERS"
  mkdir -p "$path/Documentation"
  mkdir -p "$path/arch"
  mkdir -p "$path/include"
  mkdir -p "$path/drivers"
  mkdir -p "$path/fs"
  mkdir -p "$path/init"
  mkdir -p "$path/ipc"
  mkdir -p "$path/kernel"
  mkdir -p "$path/lib"
  mkdir -p "$path/scripts"
}

function mk_fake_sys_class_drm
{
  declare -a fake_dirs=(
    "card0"
    "card0-DP-1"
    "card0-DP-2"
    "card0-DP-3"
    "card0-DVI-D-1"
    "card0-HDMI-A-1"
    "card1"
    "card1-DP-4"
    "card1-DP-5"
    "card1-DP-6"
    "card1-HDMI-A-2"
    "renderD128"
    "renderD129"
    "ttm")

  for dir in "${fake_dirs[@]}"
  do
    mkdir -p "$FAKE_DRM_SYSFS/$dir"
  done

  touch "$FAKE_DRM_SYSFS/version"
  touch "$FAKE_DRM_SYSFS/card0-DP-3/modes"

  cat <<END >> "$FAKE_DRM_SYSFS/card0-DP-3/modes"
1920x2160
2560x1440
1920x1080
1680x1050
1280x1024
1440x900
1280x960
1152x864
1280x720
1440x576
1024x768
1440x480
800x600
720x576
720x480
640x480
720x400
END

  cat <<END >> "$FAKE_DRM_SYSFS/card1-HDMI-A-2/modes"
2560x1440
1920x1080
1280x1024
640x480
720x400
END

}

function mk_fake_remote
{
  local -r FAKE_KW="$1"
  local -r modules_path="$2"
  local -r modules_name="test"
  local -r kernel_install_path="kernel_install"

  mkdir -p "$FAKE_KW"/{$LOCAL_TO_DEPLOY_DIR,$LOCAL_REMOTE_DIR,$kernel_install_path}
  mkdir -p "$modules_path/$modules_name"

  touch "$modules_path/$modules_name"/file{1,2}
  touch "$FAKE_KW/$kernel_install_path"/{debian.sh,deploy.sh}
}

function mk_fake_boot
{
  local -r FAKE_BOOT_DIR="$1"

  mkdir -p "$FAKE_BOOT_DIR"
  cp -r "$SAMPLES_DIR/boot" "$FAKE_BOOT_DIR"
}

# This function expects an array of string with the command sequence and a
# string containing the output.
#
# @expected Command sequence as an array
# @result_to_compare A raw output from the string
# @ID An ID identification
function compare_command_sequence
{
  declare -a expected=("${!1}")
  local result_to_compare="$2"
  local ID="$3"
  local count=0

  ID=${ID:-0}

  while read f; do
    if [[ "${expected[$count]}" != "${f}" ]]; then
      fail "($ID) $count - Expected cmd \"${expected[$count]}\" to be \"${f}\""
    fi
    ((count++))
  done <<< "$result_to_compare"
}

function invoke_shunit
{
  command -v shunit2 > /dev/null
  if [[ "$?" -eq 0 ]]; then
    . shunit2
  elif [[ -f ./tests/shunit2 ]]; then
    . ./tests/shunit2
  else
    echo -e "Can't find shunit2.\nDo you have it installed (or downloaded it to ./tests/shunit2)?"
    return 1
  fi
}

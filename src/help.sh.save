include "${KW_LIB_DIR}/lib/kwio.sh"
    '  patch-hub - Open Terminal UI to interact with patches from lore.kernel.org' \
    '  clear-cache - Clear files generated by kw' \
    '  drm - Set of commands to work with DRM drivers' \
    '  vm - Basic support for QEMU image' \
    '  version,--version,-v - Show kw version' \
    '  man - Show manual pages' \
    '  h,-h - Displays this help message' \
    '  help,--help - Show kw man page'
}

# Display the man documentation that is built on install
function kworkflow_man()
{
  feature="$1"
  flag=${2:-'SILENT'}
  doc="$KW_MAN_DIR"

  if [[ -z "$feature" ]]; then
    feature='kw'
  else
    feature="kw-${feature}"
  fi

  if [[ -f "$KW_SYSTEM_WIDE_INSTALLATION" ]]; then
    cmd_manager "$flag" "man ${feature}"
    exit "$?"
  fi

  if [[ -r "$doc/$feature.1" ]]; then
    cmd_manager "$flag" "man -l $doc/$feature.1"
    exit "$?"
  fi

  complain "Couldn't find the man page for $feature!"
  exit 2 # ENOENT
}

# This function is invoked in two situations: ./setup.sh and if kw is running
# from the repository. In the setup.sh script, KW_LIB_DIR is set to 'src,' and
# in the kw file, when running in the repo, this variable is set to
# "${KW_BASE_DIR}/src". In both cases we are dealing with kw repository.
#
# Return:
# Print the version information in the stdout.
function kworkflow_version_from_repo()
{
  local head_hash
  local branch_name
  local base_version
  local git_dir

  # get version info from the git repo
  git_dir=$(realpath "${KW_LIB_DIR}/../.git")
  head_hash=$(kw_git_get_head_hash "${git_dir}")
  branch_name=$(kw_git_get_branch_name "${git_dir}")
  base_version=$(head --lines 1 "${KW_LIB_DIR}/VERSION")

  printf '%s\nBranch: %s\nCommit: %s\n' "${base_version}" "${branch_name}" "${head_hash}"
}

# Get kw version from the VERSION file generated during the installation time,
# or get it dynamically if this command is executed directly from kw repository
# with './kw [OPTION]'.
#
# Return:
# Return kw version
function kworkflow_version()
{
  local version_path="${KW_LIB_DIR}/VERSION"

  if [[ "${KW_REPO_MODE}" == 'y' ]]; then
    kworkflow_version_from_repo
    return
  fi

  printf '%s\n' "$(< "$version_path")"
}

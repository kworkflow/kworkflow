#compdef kw

# This file holds all the native ZSH completion functions for kw and its
# sub-commands.
#
# ZSH completion functions are stored in files named _<command-to-complete> by
# convention, hence the name of this file being '_kw'.
#
# When the ZSH completion system is loaded, it looks for the first line of files
# listed in the 'fpath' variable to determine which command the file completes.
# So the first line '#compdef kw' is necessary to tell ZSH to use the completion
# functions in this file to complete kw commands.

# Main dispatcher
_kw()
{
  local -a commands

  commands=(
    'backup:Save or restore kw data'
    'bd:Build and install modules'
    'build:Build kernel'
    'clear-cache:Clear files generated by kw'
    'codestyle:Apply checkpatch on directory or file'
    'config:Set kw config options'
  )

  if [[ "$CURRENT" -gt 2 ]]; then
    # Remember the command name
    local command="${words[2]}"
    # Set the context for the command
    curcontext="${curcontext%:*:*}:kw-${command}"
    # Narrow the range of words we are looking at to exclude 'kw'
    ((CURRENT--))
    shift words
    # Run the completion for the command if it exists
    if [[ $(type "_kw_${command}") =~ 'not found' ]]; then
      _nothing
    else
      eval "_kw_${command}"
    fi
  else
    # Show top level kw commands
    _describe -t kw-commands 'kw command' commands
  fi
}

_kw_backup()
{
  local args='(-r --restore)1: :_files'
  local force=''
  if ((words[(I)-r|--restore])); then
    args=''
    force='--force[replace all current kw data from backup without prompting user]'
  fi

  _arguments : \
    '(-r --restore)'{-r,--restore}'[restore kw data from specified path]: :_files' \
    $force \
    $args
}

_kw_bd()
{
  _nothing
}

_kw_build()
{
  _arguments : \
    '(-i --info -c --clean -n --menu -d --doc --ccache -w --warnings -S --cpu-scaling -s --save-log-to --llvm)'{-i,--info}'[display kernel release name, version and number of modules to compile]' \
    '(-c --clean -i --info -n --menu -d --doc --ccache -w --warnings -S --cpu-scaling -s --save-log-to --llvm)'{-c,--clean}'[remove files generated by the kernel build system]' \
    '(-n --menu -i --info -c --clean -d --doc)'{-n,--menu}'[invoke kernel menuconfig]' \
    '(-d --doc -i --info -c --clean -n --menu)'{-d,--doc}'[build the kernel-doc]' \
    '(-i --info -c --clean)--ccache[enable ccache during compilation tasks]' \
    '(-w --warnings -i --info -c --clean)'{-w,--warnings}'[enable compilation warnings]:log level:(1 2 3 12 13 23 123)' \
    '(-S --cpu-scaling -i --info -c --clean)'{-S,--cpu-scaling}'[set CPU usage]:scaling percentage: ' \
    '(-s --save-log-to -i --info -c --clean)'{-s,--save-log-to}'[save full compilation log with the enabled warnings to the specified path]:log path:_files' \
    '(-i --info -c --clean)--llvm[enable the usage of the LLVM toolchain]'
}

_kw_clear-cache()
{
  _nothing
}

_kw_codestyle()
{
  _arguments : \
    '(*): :_files'
}

_kw_config()
{
  _list_configs()
  {
    local configs='(
      vm.virtualizer vm.mount_point vm.qemu_hw_options vm.qemu_net_options vm.qemu_path_image
      kworkflow.ssh_user kworkflow.ssh_ip kworkflow.ssh_port kworkflow.ssh_configfile kworkflow.hostname
      kworkflow.disable_statistics_data_track kworkflow.gui_on kworkflow.gui_off kworkflow.send_opts
      kworkflow.blocked_emails kworkflow.checkpatch_opts kworkflow.get_maintainer_opts
      notification.alert notification.sound_alert_command notification.visual_alert_command
      build.arch build.kernel_img_name build.cross_compile build.menu_config build.doc_type
      build.cpu_scaling_factor build.enable_ccache build.warning_level build.use_llvm
      deploy.kw_files_remote_path deploy.deploy_temporary_files_path deploy.deploy_default_compression
      deploy.dtb_copy_pattern deploy.default_deploy_target deploy.reboot_after_deploy
      deploy.strip_modules_debug_option mail.send_opts mail.blocked_emails
    )'

    _multi_parts . "$configs"
  }

  local args='(-s --show -g --global -l --local)1: :_list_configs'
  if ((words[(I)-s|--show])); then
    args='*: :(vm kworkflow notification build deploy mail)'
  fi

  _arguments : \
    '(-g --global -l --local -s --show)'{-g,--global}'[set global configuration]' \
    '(-l --local -g --global -s --show)'{-l,--local}'[set local configuration]' \
    '(-s --show -g --global -l --local)'{-s,--show}'[display current configurations]: :(vm kworkflow notification build deploy mail)' \
    $args
}

_kw "$@"

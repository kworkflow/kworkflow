#!/bin/bash

# Set required variables
KWORKFLOW=${KWORKFLOW:-"kw"}
src_script_path=${src_script_path:-"$HOME/.config/$KWORKFLOW/src"}
plugins_path=${plugins_path:-"$HOME/.config/$KWORKFLOW/src/plugins"}
external_script_path=${external_script_path:-"$HOME/.config/$KWORKFLOW/external"}
etc_files_path=${etc_files_path:-"$HOME/.config/$KWORKFLOW/etc"}
config_files_path=${config_files_path:-"$HOME/.config/$KWORKFLOW"}
statistics_path=${statistics_path:-"$HOME/.config/$KWORKFLOW/statistics"}
kw_cache_dir=${kw_cache_dir:-"$HOME/.cache/kw"}

# Export external variables required by kworkflow
export KWORKFLOW

function kw()
{
  action=$1
  shift

  mkdir -p "$kw_cache_dir"

  case "$action" in
    init)
      (
        . "$src_script_path/init.sh" --source-only

        init_kw
        return "$?"
      )
      ;;
    mount|mo)
      (
        . "$src_script_path"/vm.sh --source-only

        vm_mount
        local ret=$?
        alert_completion "kw mount" "$1"
        return $ret
      )
      ;;
    umount|um)
      (
        . "$src_script_path"/vm.sh --source-only

        vm_umount
        local ret=$?
        alert_completion "kw umount" "$1"
        return $ret
      )
      ;;
    boot|bo)
      (
        . "$src_script_path"/vm.sh --source-only

        vm_boot
      )
      ;;
    up|u)
      (
        . "$src_script_path"/vm.sh --source-only

        vm_up
      )
      ;;
    build|b)
      (
        . "$src_script_path"/mk.sh --source-only

        mk_build
        local ret=$?
        alert_completion "kw build" "$1"
        return $ret
      )
      ;;
    deploy|d)
      (
        . "$src_script_path"/mk.sh --source-only

        kernel_deploy "$@"
        local ret="$?"
        alert_completion "kw deploy" "$1"
        return "$ret"
      )
      ;;
    bd)
      (
        . "$src_script_path"/mk.sh --source-only

        mk_build && kernel_deploy "$@"
        local ret="$?"
        alert_completion "kw db" "$1"
        return "$ret"
      )
      ;;
    ssh|s)
      (
        . "$src_script_path"/vm.sh --source-only

        vm_ssh $@
      )
      ;;
    vars)
      (
        . "$src_script_path"/kw_config_loader.sh --source-only

        show_variables
      )
      ;;
    codestyle|c)
      (
      . "$src_script_path"/checkpatch_wrapper.sh --source-only

        execute_checkpatch $@
      )
      ;;
    maintainers|m)
      (
        . "$src_script_path"/get_maintainer_wrapper.sh --source-only

        execute_get_maintainer $@
      )
      ;;
    configm|g)
      (
        . "$src_script_path"/config_manager.sh --source-only

        execute_config_manager $@
      )
      ;;
    help|h)
      (
        . "$src_script_path"/help.sh --source-only

        kworkflow-help
      )
      ;;
    explore|e)
      (
        . "$src_script_path"/explore.sh --source-only

        explore "$@"
      )
      ;;
    man)
      (
        . $src_script_path/help.sh --source-only

        kworkflow-man
      )
      ;;
    version|--version|-v)
      (
        . "$src_script_path"/help.sh --source-only

        kworkflow_version
      )
      ;;
    statistics)
      (
        . "$src_script_path"/statistics.sh --source-only

        statistics "$@"
      )
      ;;
    clear-cache)
        . "$src_script_path"/mk.sh --source-only

        cleanup
      ;;
    *)
      (
        . "$src_script_path"/help.sh --source-only

        complain "Invalid option"
        kworkflow-help
        return 1
      )
      ;;
  esac
}

kw "$@"
